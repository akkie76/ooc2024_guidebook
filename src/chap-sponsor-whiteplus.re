= DDDで迷わないために、チームの正解を見つける

//flushright{
株式会社ホワイトプラス 德廣 陽介
//}

//note{
当稿はホワイトプラスのテックブログの記事を、

Object-Oriented Conference 2024ガイドブック向けに加筆・修正したものです

https://blog.wh-plus.co.jp/entry/2022/12/09/advent-calendar
//}

Lenetという宅配クリーニングサービスを展開しているホワイトプラスのCX開発チーム所属でエンジニアをしている德廣と申します。

ホワイトプラスに入社し、DDD（ドメイン駆動設計）をチームで「よりスムーズな実装」を目指すために取り組んだ2つを紹介します！

== 背景

突然ですが、 「DDDにおける "Repository（リポジトリ）" についての説明」を求められた時、チームメンバーと「同じ話」ができるでしょうか？
入社してすぐの私にはできませんでした。

DDDに限らず「前職（前配属先）のチームでは別の解釈をしていました。」「解釈は同じでも、コンテキストによって方針は異なる」というのはよくある話だと思います。

背景や環境（学んできた経緯や実践してきた場）が異なるため、当然ですよね。そしてこの @<b>{解釈やこれまでの経験との違い〜} で問題が起きました。

 * 起きた問題
 ** レビューの指摘で手戻りが発生
 ** 既存コードについての確認で、度々チームの時間が奪わる

早くチームに貢献したいという焦りもあった私は「 @<b>{チームの正解（目指す設計・実装）} を明確にすれば、新たな参画メンバーでも自分のブレに気付けるし最速でチーム貢献できるようにのでは？」と考えました。

@<b>{チームの正解（目指す設計・実装）} を探すために「チームメンバーそれぞれが考える理想をブツけるのが早い」と考え @<b>{"DDD認識共有会"} を開催することにしました！

== "DDD認識共有会" の開催

=== やること

共有会の内容はシンプルです。

 * メンバーの一人が自身の解釈や理解していることを、こんな感じで話すだけ。
 ** 「そもそもDDDとは？その目的とは？」
 ** 「Aggregate（集約）とは？その責務は？一番理想に近い既存コードは？」
 * 誰が話すのか？
 ** 德廣が話し手になりました。（理由は後述）

=== ゴール

 * チームとして
 ** チームの正解（目指す設計・実装） を見つける。
 * メンバー個人として
 ** 普段の疑問や悩みを積極的に発言し、より良い設計・実装を模索する。
 *** 「こういう風に実装しているところを見つけたけど、自分なら別のアプローチがいいと思う。みんなはどう？」
 *** 「この前の実装でこんな問題が出てきたんだけど、みんなはどうしてる？」
 * DDD歴が浅いメンバーは理解を深める機会とし、疑問があれば解消する。
 ** 「なるほど、わからん」も積極的に発言してもらう。

=== やってよかったこと

 * 当初の問題点であった「時間が奪われる」ことが減った。
 ** @<b>{チームの正解（目指す設計・実装）} を把握しているため、実装時に迷いがなくなった。
 ** キャッチアップの速度が早まったと実感しています。
 * 思わぬ効果
 ** レビュワー間の方向性の違いによる議論が減った。
 * DDD歴が浅いメンバーの理解が深まった。
 ** 既存コードに対して「チームの正解（目指す設計・実装） と違うかも？」と、疑問を持てるようになった。
 ** 数カ月後に「共有会の時にみんなが話してたことがやっとわかりました」などの成長が感じられるようになった。
 * よりDDDをチームに浸透させる施策のきっかけができた。
 ** 後述の「@<b>{"DDD実装ガイドライン"} の作成」で説明します

=== 工夫したこと

 * 他のメンバーとブツかりやすく意見を出しやすくするため、チーム歴が浅い人を話し手にした。
 ** チーム歴が長いメンバー同士だと ズレ は既に解消されているため。
 ** 今回は入社2ヶ月であった私が担当しました。
 * チームの正解を導き出した時の背景が大事なので、質疑応答は議事メモとして残すようにした。
 * 質疑応答はDDD歴が浅いメンバーから話をしてもらうようにした。
 ** 話に入れないまま、結果だけを受け入れてしまわないようにしました。

== "DDD実装ガイドライン" の作成

「@<b>{"DDD認識共有会"}」を開催したことで、DDD歴が浅いメンバーがどのような点で躓きやすいかがわかりました。

次のステップとして「パターン毎の実装ガイドライン作成」の施策を取り組んでいる話になります。

=== 書いたこと

 * 「責務と役割」
 ** 各パターンの責務・役割における振る舞いや属性、制御について概念をまとめています。
 * 「実現する方法」
 ** MUSTで実装する時に忘れてほしくないことを書いています。
 * 「実装のポイント」
 ** 実装する時に悩みそうなポイントをまとめています。
 * 「実装例」
 ** 各パターンの振る舞い毎にまとめています。

//indepimage[whiteplus1][実装例のサンプル：UseCaseパターン]

=== やってみて、ふりかえり

//indepimage[whiteplus2][DDD実装ガイドライン：ふりかえり]

 * 作成することで曖昧に解釈していた事に気付き、改めて学び直せた。言語化できた。
 * 新メンバーが加わった時に説明がしやすくなった。
 * いつでも目指しているゴールがわかるようになったので、レビューや実装で他人の時間を奪うのが減った。
 ** 本に書かれている概念だけだと、実践的なイメージが湧かず難しく感じていたのが解消された。
 ** 本を読んで学んだことと、プロダクトコードの実装とを紐づけるのに助かった。
 * 新たに発見した「やりたいこと」
 ** DDD以外にも、アーキテクチャや設計などのHowも実装ガイドラインとして整理したくなった。
 ** なぜこうするのか (Why) も整備したいと思った。

== おわりに

もし「同じ単語でもあの人が話すアレは、私の思っているコレと少し違うかも？」と思ったら、一度立ち止まってチームで話し合ってみませんか？

チームと個々が向いている方向が噛み合うことで生産性の向上にもつながりますし、何より迷いなく進められる事でより良い開発体験を得られるかもしれません！

　

　

//embed{
    \begin{minipage}{.1\linewidth}
        \centering
        \includegraphics[width=.75\linewidth]{images/contributors/devtoku.png}
    \end{minipage}
    \begin{minipage}{.89\linewidth}
        @yosuke-dev
		https://github.com/yosuke-dev
    \end{minipage}
    \hspace{1ex}
//}
ホワイトプラスでWebエンジニアをしています。
C#畑からPHPに渡ってきたクマです。個人開発ではKotlinを嗜んでいます。
