= オブジェクト指向で目指すものと目指さないもの

//flushright{
虎の穴ラボ 河野裕隆@hk_it7
//}

虎の穴ラボでリードエンジニアとマネージメントをやっている河野です。

オブジェクト指向との向き合い方を目指すものと目指さないものという視点で書きます。100%私見です。

== オブジェクト指向とはなにか

まず前提として、オブジェクト指向について定義する必要があります。
今回の話では単純に「必要な各要素をオブジェクト(モノ)として扱い、モデリングする手法」として進めます。
一方で「オブジェクト間のメッセージングによりシステムを構築する手法」という視点は少し薄い内容となります。

=== 設計/分析/プログラミング/言語

「オブジェクト指向」は適用するフェーズの接頭語として用いる例があります。
具体的には「オブジェクト指向設計」や「オブジェクト指向プログラミング」です。

章のタイトルとして「設計/分析/プログラミング/言語」としましたが、「言語」だけ少し趣きが異なります。
「オブジェクト指向言語」は、意味を開くと「オブジェクト指向で書くことができる言語」ということができるかと思います。
言葉尻を捉えれば、「オブジェクト指向以外でも書こうと思えば書ける言語」ということです。
つまり、Javaなどのオブジェクト指向言語で書くからオブジェクト指向とはならず、オブジェクト指向で書くからオブジェクト指向なわけです。
書いてて少し混乱してきましたね。  

では「オブジェクト指向で書く」とはどういうことでしょうか？
これは最初に決めた定義に則り、「必要な各要素をオブジェクト(モノ)として扱い、モデリングする手法を用いてプログラムを書く」ということになります。

=== オブジェクト指向で書くために必要なこと

本来であれば「オブジェクト指向開発方法論」を学び、「オブジェクト指向分析」、「オブジェクト指向設計」を経て「オブジェクト指向プログラミング」を実施する必要がありますが、そこまで厳密に進めていないところもあるかと思います。
つまり、@<b>{我々は雰囲気でオブジェクト指向をやっている}ような状態です(しっかり分析、設計を経て開発を行っている皆様、申し訳ありません)。  

また時間をかけて設計するケースでも、オブジェクトに落とし込むことが難しいことがあります。
例えばWebサービスの開発で@<code>{UserController}を作ったり、@<code>{OrderService}を作ったり、あるいは@<code>{DateUtil}を作ったりしてしまう場合です。

ControllerやUtilはモノではなく、観測できません。にも関わらず厳密なオブジェクト指向で開発していると主張するのは一種の「雰囲気でオブジェクト指向やっている状態」だと思います（前述のモジュールがオブジェクト指向から外れていることを認識して進めている場合、この限りではありません）。

この雰囲気でオブジェクト指向をやっている状態を@<b>{雰囲気OO}と名付け、その目的を明確にしていきます。

==== 余談：DDDと雰囲気OO

ここ数年で技術イベント等でもよく聞かれるようになったドメイン駆動設計。

概念としてはオブジェクト指向のために限定された設計手法ではありませんが、オブジェクト指向と組み合わせることが多い考え方です。
何をもってオブジェクトとするかを「ドメインエキスパート」らによる「ユビキタス言語」を介してモデリングし、設計、開発していくさまは、まさしくオブジェクト指向分析/設計そのものと言えます。

オブジェクトを考えるためにはオブジェクトを観測する主体が必要であり、量子論で交わされた議論をなぞると「月を見ていないとき、月は存在しない」のです。

一方でサービスの利用などオブジェクトと呼び得ないものも登場し、厳密なオブジェクト指向とは乖離します。

DDDが注目されるようになった背景として、オブジェクト指向の分析/設計がやや軽視されてきたカウンターのようなものがあるのではないかと個人的には考えています。前段の言葉を用いると「雰囲気OOとDDDは相容れない」ということです。

== 雰囲気OOを用いる目的、目指す場所

まず「お断り」として、雰囲気OOは悪ではありませんし、したがって本記事で処方箋を出すつもりもありません。
ではなぜ雰囲気OOは「悪ではない」と言えるのでしょうか？

結論から言うと厳密なオブジェクト指向は難しすぎるからです。それに対して、雰囲気OOはオブジェクト指向開発方法論のエッセンスを適宜活用して、組み合わせて開発していきます。

雰囲気OOで良ければ思想を学ぶ必要もなければ、Utilの代替オブジェクトの命名に悩むこともありません。

各オブジェクトは「ある程度の単一な責務を持つ」、「責務に対してエキスパートとする」、「プロパティ等の可視性は最低限に保つ」あたりを満たしていれば、一定の保守性は担保されます。
またどの言語であっても、このくらいの「オブジェクトを扱う機能」は用意されています。

大きいシステムになればなるほど、すべての処理を追うことが困難になります。そのようなときに「ざっくり内容を把握する」には雰囲気OOはぴったりです。
各オブジェクトはそれぞれのエキスパートであるため、メソッドとそのシグネチャで何をしているのか予測できるはずです。

逆に言えば、コードを正確に追わないと「ざっくり内容を把握」できなくなった場合は設計に立ち返る必要があります。
私がコードレビューするときは「オブジェクト指向的にどうか」という具体性のない指標よりも「ざっくり内容を把握できるか」という点を意識しています。

=== プロジェクト特性と雰囲気OO
一方でプロジェクト特性に合わせてオブジェクト指向に対する濃度、粒度を調節して、設計/開発を進める必要があると感じています。
具体的にはGUIプログラミングでは濃度を若干濃くして、Web（特にサーバーサイド）プログラミングでは少し薄くするようなイメージです。

これはGUIプログラミングは「モノ」を扱うのでオブジェクトの概念が持ち込みやすいためです。
オブジェクトが何かを描写するのでカプセル化も意識しやすいかと思います。

画一的にオブジェクト指向を適用すると窮屈になってしまいますが、濃度を調節してオブジェクト指向の考え方を部分的に適用していくことで、開発スピードの維持にもつながると考えます。

== まとめ
オブジェクト指向は難しいと言われますが、オブジェクトを外から見たときに「ざっくりわかる」ようになっていれば問題ないという話でした。

一部エッセンス的に（保身も兼ねて）難しい言葉も使っていますが、言いたかったことは前の1文の通りです。
雰囲気OOを通して、コスト、バリュー、クオリティのバランスを取った開発ができると良いな、願っています。

　

　

　

//embed{
    \begin{minipage}{.1\linewidth}
        \centering
        \includegraphics[width=.75\linewidth]{images/contributors/kono.png}
    \end{minipage}
    \begin{minipage}{.89\linewidth}
        河野裕隆　https://twitter.com/hk\_it7\\
		https://github.com/h-kono-it
    \end{minipage}
    \hspace{1ex}
//}
虎の穴ラボでWebサービスの開発、マネジメントを行っています。Java、Ruby、TypeScript/JavaScript、Vue.jsとフロントもバックも書きますし、AWS等をいじったりもします。何でも屋さんです。